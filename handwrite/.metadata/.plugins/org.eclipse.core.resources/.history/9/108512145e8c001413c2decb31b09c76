package ui;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JToolBar;

/**
 * This is an extremely scaled-down sketching canvas; with it you can only
 * scribble thin black lines. For simplicity the window contents are never
 * refreshed when they are uncovered.
 */
@SuppressWarnings("serial")
public class TrivialSketcher extends JPanel {

	/**
	 * Keeps track of the last point to draw the next line from.
	 */
	private List<Point> current = new ArrayList<Point>();
	private List<List<Point>> all = new ArrayList<List<Point>>();
	private BasicStroke stroke = new BasicStroke(18.0f);
	public  Integer guess=null;

	/**
	 * Constructs a panel, registering listeners for the mouse.
	 */
	public TrivialSketcher() {

		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				guess=null;
				current = new ArrayList<Point>();
				current.add(new Point(e.getX(), e.getY()));
				all.add(current);
			}
		});

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				current.add(new Point(e.getX(), e.getY()));
				repaint();
			}
		});

		setPreferredSize(new Dimension(280, 280));
		setBackground(Color.WHITE);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
	 */
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		if (null!=guess){
			g.setFont(new Font(g.getFont().getFontName(), Font.PLAIN, 200));
			g.drawString(String.format("%d", guess), 100, 200);			
			return;
		}

		BufferedImage image = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
		Graphics2D g2 = image.createGraphics();
		drawNumber(g2);
		g2.dispose();
		image.flush();

		g2 = (Graphics2D) g;
		g2.drawImage(image, null, 0, 0);

		Point c = centerMass(getAsByteArray(image), getWidth());
		g2.setColor(Color.GREEN);
		g2.fillOval(c.x, c.y, 10, 10);

		g2.setColor(Color.RED);
		Rectangle r = getBox(image);
		g2.drawRect(r.x, r.y, r.width, r.height);
	}

	private void drawNumber(Graphics2D g2) {
		super.paintComponent(g2);
		Stroke s = g2.getStroke();
		
		g2.setStroke(stroke);
		g2.setColor(Color.BLACK);
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		for (List<Point> points : all) {
			for (int i = 1; i < points.size(); i++) {
				Point o = points.get(i - 1);
				Point d = points.get(i);
				g2.draw(new Line2D.Double(o.getX(), o.getY(), d.getX(), d.getY()));
			}
		}
		g2.setStroke(s);
	}

	protected Rectangle getBox(BufferedImage source) {
		int xx = source.getWidth();
		int yy = source.getHeight();
		int w = 0;
		int h = 0;

		for (int y = 0; y < source.getHeight(); y++) {
			for (int x = 0; x < source.getWidth(); x++) {
				int p = source.getRGB(x, y) & 0x00FFFFFF;
				p = 0xFF - (((p * 0xFF) / 0xFFFFFF) & 0xFF);
				if (p > 0 && x < xx) xx = x;
				if (p > 0 && y < yy) yy = y;
				if (p > 0 && x > w)	  w = x;
				if (p > 0 && y > h)	  h = y;
			}
		}

		return new Rectangle(xx, yy, w - xx, h - yy);
	}

	protected byte[] getAsByteArray(BufferedImage source) {
		byte[] result = new byte[source.getHeight() * source.getWidth()];
		int k = 0;
		for (int i = 0; i < source.getHeight(); i++) {
			for (int j = 0; j < source.getWidth(); j++) {
				int p = source.getRGB(j, i) & 0x00FFFFFF;
				p = 0xFF - (((p * 0xFF) / 0xFFFFFF) & 0xFF);
				result[k++] = (byte) p;
			}
		}
		return result;
	}

	protected Point centerMass(byte[] source, int width) {
		int M = 1;
		int k = 0;
		int x = 0;
		int y = 0;

		for (int i = 0; i < width; i++) {
			for (int j = 0; j < width; j++) {
				int _p = source[k] & 0xFF;
				M += _p;
				x += _p * j;
				y += _p * i;
				k++;
			}
		}
		return new Point(x / M, y / M);
	}

	public void save() {
		BufferedImage image = new BufferedImage(getWidth(), getHeight(),BufferedImage.TYPE_INT_RGB);
		Graphics2D g2 = image.createGraphics();
		drawNumber(g2);
		g2.dispose();
		image.flush();
			

		BufferedImage resized = new BufferedImage(20, 20, BufferedImage.TYPE_INT_RGB);
		Rectangle r = getBox(image);
		g2 = resized.createGraphics();
		super.paintComponent(g2);
		g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,  RenderingHints.VALUE_ANTIALIAS_ON);
		g2.drawImage(image, 0, 0, 20, 20, r.x, r.y, r.x+r.width, r.y+r.height, null);
		g2.dispose();
		resized.flush();
		
		BufferedImage centered = new BufferedImage(28, 28, BufferedImage.TYPE_BYTE_GRAY);
		Point c = centerMass(getAsByteArray(resized), 20);
		g2 = centered.createGraphics();
		super.paintComponent(g2);
		
		g2.drawImage(resized, 14-c.x, 14-c.y, 34 - c.x, 34 - c.y, 0, 0, 20, 20, null);
		g2.dispose();
		centered.flush();
		
		g2 = (Graphics2D) getGraphics();
		g2.drawImage(centered, null, 0, 0);
		g2.drawRect(0, 0, 28, 28);
		
		all.clear();
		current.clear();
		
		try {
			FileOutputStream f = new FileOutputStream(new File("../test.data"));
			f.write(getAsByteArray(centered));
			f.close();			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * A tester method that embeds the panel in a frame so you can run it as an
	 * application.
	 */
	public static void main(String[] args) {
		final JFrame frame = new JFrame("Simple Number Reader");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JToolBar bar = new JToolBar();
		final TrivialSketcher s = new TrivialSketcher();
		JButton p;
		bar.add(p = new JButton("?"));

		p.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				frame.setCursor(Cursor.WAIT_CURSOR);
				s.save();
				
				Runtime rt = Runtime.getRuntime();
				try {					
					Process pr = rt.exec("octave -q --eval \"guess()\" -p C:/Users/Fernando/Dropbox/Coursera/ML/octave/ex4/handwrite/");
					pr.waitFor();
					DataInputStream ins = new DataInputStream(pr.getInputStream());
					s.guess = Integer.valueOf(ins.readLine());	
					s.repaint();
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				 
				frame.setCursor(Cursor.DEFAULT_CURSOR);
				
			}
		});
		
		frame.setLayout(new BorderLayout());
		frame.add(bar, BorderLayout.NORTH);
		frame.add(s, BorderLayout.CENTER);

		frame.setVisible(true);
		frame.setResizable(false);
		frame.pack();
	}
}